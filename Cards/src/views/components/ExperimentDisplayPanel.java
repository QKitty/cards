/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.components;

import com.gmail.qkitty6.patterns.observer.IObserver;
import com.gmail.qkitty6.patterns.observer.ISubject;
import datamodel.enums.DrawnCardsDisplayType;
import datamodel.enums.ParticipantGuess;
import datamodel.interfaces.IControllable;
import datamodel.interfaces.IController;
import datamodel.interfaces.IDeck;
import datamodel.interfaces.IExperimentModel;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * Display panel shown when the experiment is running
 *
 * @author qkitt
 */
public class ExperimentDisplayPanel extends javax.swing.JPanel implements IControllable, IObserver<Void>, ISubject {

    private final IController conn;
    private final List<BaseCardPanel> displayPanels;
    private final JButton btnEndTrial;

    /**
     * Creates new form ExperimentDisplayPanel
     *
     * @param newConn - The controller for this panel
     */
    public ExperimentDisplayPanel(IController newConn) {
        initComponents();
        this.conn = newConn;
        this.displayPanels = new ArrayList<>();
        this.btnEndTrial = new JButton("End Trial");
        initialise();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrDisplay = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(scrDisplay, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrDisplay;
    // End of variables declaration//GEN-END:variables

//<editor-fold defaultstate="collapsed" desc="IControllable implementation">
    @Override
    public IController getController() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean setController(IController aController) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="ISubject Implementation">
    @Override
    public boolean registerObserver(IObserver io) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean removeObserver(IObserver io) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void notifyObservers() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public <T> void notifyObservers(T t) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Set<IObserver> removeAllObservers() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean registerObserver(Collection<? extends IObserver> clctn) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="IObserver implementation">
    @Override
    public void update() {
        if (this.hasValidGuesses()) {
            this.btnEndTrial.setEnabled(true);
        } else {
            this.btnEndTrial.setEnabled(false);
        }
    }
//</editor-fold>

    private void initialise() {
        IExperimentModel expModel = this.conn.getExpModel();
        expModel.registerObserver(this);
        DrawnCardsDisplayType drawnCardsDisplayType = this.conn.getDrawnCardsDisplayType();
        List<IDeck> decks = expModel.getDecks();
        JPanel pnlViewer = new JPanel(new GridLayout(0, decks.size()));
        int i = 0;
        for (IDeck currDeck : decks) {
            BaseCardPanel aDisplay = new BaseCardPanel();
            aDisplay.setCardsDrawnRecordList(expModel.getCardDrawnRecordList());
            aDisplay.setCardDeck(currDeck);
            aDisplay.setSubPanelDisplayType(drawnCardsDisplayType);
            this.displayPanels.add(aDisplay);
            pnlViewer.add(aDisplay);
            i++;
        }
        this.add(pnlViewer, BorderLayout.CENTER);
        //Setup the End Trial Button
        this.btnEndTrial.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    conn.endExperiment();
                } catch (IllegalStateException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Unable to end experiment", JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Cannot save experiment data.", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        this.add(this.btnEndTrial, BorderLayout.SOUTH);
        this.revalidate();
    }

    private boolean hasValidGuesses() {
        boolean result = false;
        if (0 < this.displayPanels.size()) {
            result = conn.getExpModel().hasValidGuesses();
        }
        return result;
    }
}
