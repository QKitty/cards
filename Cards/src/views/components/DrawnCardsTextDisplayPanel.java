/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.components;

import com.gmail.qkitty6.patterns.observer.IObserver;
import datamodel.interfaces.IDeck;
import datamodel.interfaces.IDeckManager;

/**
 * A JPanel for showing the numbers of drawn Kings, Queens and Other cards
 *
 * @author qkitt
 */
public class DrawnCardsTextDisplayPanel extends javax.swing.JPanel implements IObserver<Void>, IDeckManager {

    private IDeck myCardDeck;

    /**
     * Creates new form DrawnCardsTextDisplayPanel
     *
     * @param aDeck - The IDeck object that will provide data to display on the
     * panel
     */
    public DrawnCardsTextDisplayPanel(IDeck aDeck) {
        initComponents();
        this.setCardDeck(aDeck);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblKQValue = new javax.swing.JLabel();
        lblNonKQValue = new javax.swing.JLabel();
        lblCardsDrawn = new javax.swing.JLabel();

        lblKQValue.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblKQValue.setText("Total Kings & Queens = 0");
        lblKQValue.setToolTipText("");

        lblNonKQValue.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblNonKQValue.setText("Total other cards = 0");
        lblNonKQValue.setToolTipText("");

        lblCardsDrawn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblCardsDrawn.setText("Total cards drawn = 0");
        lblCardsDrawn.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblKQValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNonKQValue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCardsDrawn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblKQValue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNonKQValue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCardsDrawn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblCardsDrawn;
    private javax.swing.JLabel lblKQValue;
    private javax.swing.JLabel lblNonKQValue;
    // End of variables declaration//GEN-END:variables

    @Override
    public IDeck getCardDeck() {
        return this.myCardDeck;
    }

    @Override
    public final void setCardDeck(IDeck aDeck) {
        if (null != aDeck) {
            if (null != this.myCardDeck) {
                this.myCardDeck.removeObserver(this);
            }
            this.myCardDeck = aDeck;
            this.myCardDeck.registerObserver(this);
            this.update();
        }
    }

    @Override
    public void update() {
        if(null != this.myCardDeck){
            int intK = this.myCardDeck.getNoOfKingsDrawn();
            int intQ = this.myCardDeck.getNoOfQueensDrawn();
            int intKQ = intK + intQ;
            int intOther = this.myCardDeck.getNoOfOtherCardsDrawn();
            int intTotal = intKQ + intOther;
            lblKQValue.setText("Total Kings & Queens = " + intKQ);
            lblNonKQValue.setText("Total other cards = " + intOther);
            lblCardsDrawn.setText("Total cards drawn = " + intTotal);
        }else{
            lblKQValue.setText("Total Kings & Queens = " + 0);
            lblNonKQValue.setText("Total other cards = " + 0);
            lblCardsDrawn.setText("Total cards drawn = " + 0);
        }
        repaint();
    }

}
