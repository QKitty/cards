/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.components;

import com.gmail.qkitty6.patterns.observer.IObserver;
import datamodel.enums.CardAlgorithmCategory;
import datamodel.enums.CardSuite;
import datamodel.enums.CardValue;
import datamodel.enums.DeckType;
import datamodel.enums.ParticipantGuess;
import datamodel.interfaces.ICard;
import datamodel.interfaces.IDeck;
import datamodel.interfaces.IDeckAlgorithm;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import javax.swing.Icon;
import views.animations.CardDrawingAnimation;
import views.svg.CardFactory;

/**
 *
 * @author rtucker
 */
public class CardDrawnHistoryPanel extends javax.swing.JPanel implements IDeck, IObserver<Void> {

    private ICard dumbyBackCard;
    private IDeck myCardDeck;
//    private ScheduledExecutorService tp;
    private CardDrawingAnimation currAnimation;

    /**
     * Creates new form CardDeckPanel
     */
    public CardDrawnHistoryPanel() {
        initComponents();
        drawnCardsPanel.registerObserver(this);
//        tp = Executors.newSingleThreadScheduledExecutor();
        java.awt.EventQueue.invokeLater(() -> {
            setIcon();
        });
        jScrollPane1.setMaximumSize(jScrollPane1.getPreferredSize());
        System.out.println("Size JSCROLL" + jScrollPane1.getPreferredSize().toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCardBack = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        drawnCardsPanel = new views.components.CardListPanel();

        lblCardBack.setToolTipText("");
        dumbyBackCard = CardFactory.createPlayingCard(CardSuite.CLUBS, CardValue.ACE, false);
        Icon cardIcon = dumbyBackCard.getCardIcon(lblCardBack.getWidth(), lblCardBack.getHeight());
        lblCardBack.setIcon(cardIcon);
        lblCardBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCardBackMouseClicked(evt);
            }
        });

        drawnCardsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jScrollPane1.setViewportView(drawnCardsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblCardBack, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblCardBack, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lblCardBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCardBackMouseClicked
        if(evt.getClickCount() == 2){
            startCardAnimation();
        }
    }//GEN-LAST:event_lblCardBackMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private views.components.CardListPanel drawnCardsPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCardBack;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        dumbyBackCard = CardFactory.createPlayingCard(CardSuite.CLUBS, CardValue.ACE, false);
        Icon cardIcon = dumbyBackCard.getCardIcon(lblCardBack.getWidth(), lblCardBack.getHeight());
        lblCardBack.setIcon(cardIcon);
        repaint();
    }

    public void setCardDeck(IDeck aDeck) {
        if (null != aDeck) {
            myCardDeck = aDeck;
            drawnCardsPanel.clearCardList();
        }
    }

//<editor-fold defaultstate="collapsed" desc="IDeck interface implementation">
    @Override
    public boolean isAlgorithmic() {
        return myCardDeck.isAlgorithmic();
    }

    @Override
    public IDeckAlgorithm getDeckAlgorithm() {
        return myCardDeck.getDeckAlgorithm();
    }

    @Override
    public boolean setDeckAlgorithm(IDeckAlgorithm alg) {
        return myCardDeck.setDeckAlgorithm(alg);
    }
    
    @Override
    public List<ICard> getDrawnCardList() {
        return myCardDeck.getDrawnCardList();
    }

    @Override
    public int cardsDrawnSinceLastSpecialCard() {
        return myCardDeck.cardsDrawnSinceLastSpecialCard();
    }

    @Override
    public int getMaxCardDrawsBetweenSpecialCards() {
        return myCardDeck.getMaxCardDrawsBetweenSpecialCards();
    }

    @Override
    public void setMaxCardDrawsBetweenSpecialCards(int max) throws IllegalArgumentException {
        myCardDeck.setMaxCardDrawsBetweenSpecialCards(max);
    }

    @Override
    public ICard drawCard() {
        return myCardDeck.drawCard();
    }

    @Override
    public boolean hasCardsRemaining() {
        return myCardDeck.hasCardsRemaining();
    }

    @Override
    public int getNoOfRemainingCards() {
        return myCardDeck.getNoOfRemainingCards();
    }

    @Override
    public DeckType getDeckType() {
        return myCardDeck.getDeckType();
    }

    @Override
    public CardAlgorithmCategory getAlgorithmCategory() {
        return myCardDeck.getAlgorithmCategory();
    }

    @Override
    public double getProbabilityOfSpecialCard() {
        return myCardDeck.getProbabilityOfSpecialCard();
    }

    @Override
    public void setProbabilityOfSpecialCard(double probability) throws IllegalArgumentException {
        myCardDeck.setProbabilityOfSpecialCard(probability);
    }
    
    @Override
    public void reset(){
        this.myCardDeck.reset();
    }
    
    @Override
    public String getId() {
        return this.myCardDeck.getId();
    }

    @Override
    public void setId(String newId) {
        this.myCardDeck.setId(newId);
    }

    @Override
    public int getNoOfKingsDrawn() {
        return this.myCardDeck.getNoOfKingsDrawn();
    }

    @Override
    public int getNoOfQueensDrawn() {
        return this.myCardDeck.getNoOfQueensDrawn();
    }

    @Override
    public int getNoOfOtherCardsDrawn() {
        return this.myCardDeck.getNoOfOtherCardsDrawn();
    }

    @Override
    public double getProportionOfKingsVKingsAndQueensDrawn() {
        return this.myCardDeck.getProportionOfKingsVKingsAndQueensDrawn();
    }

    @Override
    public double getProportionOfKingsAndQueensDrawn() {
        return this.myCardDeck.getProportionOfKingsAndQueensDrawn();
    }
    
    @Override
    public ParticipantGuess getParticipantsGuess() {
        return this.myCardDeck.getParticipantsGuess();
    }

    @Override
    public void setParticipantsGuess(ParticipantGuess aGuess) {
        this.myCardDeck.setParticipantsGuess(aGuess);
    }

    @Override
    public boolean isParticipantGuessCorrect() {
        return this.myCardDeck.isParticipantGuessCorrect();
    }
    
    @Override
    public boolean hasParticipantGuessSet() {
        return this.myCardDeck.hasParticipantGuessSet();
    }
//</editor-fold>

    private void startCardAnimation() {
        if(null != myCardDeck){
            //Draw Card
            ICard nextCard = myCardDeck.drawCard();
            nextCard.setShowingFace(true);
            //<editor-fold defaultstate="collapsed" desc="Sort out animation later">
//            CardDrawingAnimation anim = new CardDrawingAnimation(nextCard, lblCardBack.getLocation(), drawnCardsPanel.getLocation().y, 10l, drawnCardsPanel, this);
//            tp.schedule(anim, 1l, TimeUnit.SECONDS);
//            currAnimation = anim;
//</editor-fold>
            drawnCardsPanel.replaceList(myCardDeck.getDrawnCardList());
            this.repaint();
        }
    }
    
//    public void destroy(){
//        if(!tp.isShutdown()){
//            tp.shutdownNow();
//        }
//    }

    @Override
    protected void paintComponent(Graphics grphcs) {
        super.paintComponent(grphcs); //To change body of generated methods, choose Tools | Templates.
        if(null != currAnimation && !currAnimation.isComplete()){
            BufferedImage cardImg = currAnimation.getRenderImage();
            Point renderPoint = currAnimation.getRenderPoint();
            grphcs.drawImage(cardImg, renderPoint.x, renderPoint.y, null);
        }
    }

    @Override
    public void update() {
        revalidate();
        repaint();
    }

//<editor-fold defaultstate="collapsed" desc="ISubject interface for IDeck">
    @Override
    public boolean registerObserver(IObserver o) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public boolean removeObserver(IObserver o) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void notifyObservers() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public <T> void notifyObservers(T data) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public Set<IObserver> removeAllObservers() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public boolean registerObserver(Collection<? extends IObserver> observerCollection) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="IXMLPersistable is not supported by GUI components">
    @Override
    public Class<?> getFactoryClass() {
        throw new UnsupportedOperationException("Not supported by GUI components."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public String getFactoryMethodName() {
        throw new UnsupportedOperationException("Not supported GUI components."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public Object[] getFactoryArgs() {
        throw new UnsupportedOperationException("Not supported GUI components."); //To change body of generated methods, choose Tools | Templates.
    }
//</editor-fold>
 
}
