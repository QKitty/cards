/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.components;

import datamodel.enums.CardAlgorithmCategory;
import datamodel.enums.CardSuite;
import datamodel.enums.CardValue;
import datamodel.enums.DeckType;
import datamodel.exceptions.NotAnAlgorithmicDeckException;
import datamodel.interfaces.ICard;
import datamodel.interfaces.IDeck;
import datamodel.interfaces.IDeckAlgorithm;
import java.awt.Graphics;
import javax.swing.Icon;
import views.svg.CardFactory;

/**
 *
 * @author rtucker
 */
public class CardDeckPanel extends javax.swing.JPanel implements IDeck {

    private IDeck panelDeck;
    private final ICard dumbyBackCard;

    /**
     * Creates new form CardDeckPanel
     */
    public CardDeckPanel() {
        initComponents();
        dumbyBackCard = CardFactory.createPlayingCard(CardSuite.CLUBS, CardValue.ACE, false);
        Icon cardIcon = dumbyBackCard.getCardIcon(lblCardBack.getWidth(), lblCardBack.getHeight());
        lblCardBack.setIcon(cardIcon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cardListPanel1 = new views.components.CardListPanel();
        lblCardBack = new javax.swing.JLabel();

        cardListPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        lblCardBack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cardListPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(lblCardBack, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCardBack, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cardListPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private views.components.CardListPanel cardListPanel1;
    private javax.swing.JLabel lblCardBack;
    // End of variables declaration//GEN-END:variables

    public void setDeck(IDeck aDeck) {
        if (null != aDeck) {
            this.panelDeck = aDeck;
        }
        repaint();
    }

    @Override
    public boolean isAlgorithmic() {
        boolean result = false;
        if (null != panelDeck) {
            result = panelDeck.isAlgorithmic();
        }
        return result;
    }

    @Override
    public IDeckAlgorithm getDeckAlgorithm() throws NotAnAlgorithmicDeckException {
        return panelDeck.getDeckAlgorithm();
    }

    @Override
    public boolean setDeckAlgorithm(IDeckAlgorithm alg) throws NotAnAlgorithmicDeckException {
        boolean result = false;
        if (null != alg) {
            result = panelDeck.setDeckAlgorithm(alg);
        }
        return result;
    }

    @Override
    public int cardsDrawnSinceLastSpecialCard() {
        int result = 0;
        if(null != panelDeck){
            result = panelDeck.cardsDrawnSinceLastSpecialCard();
        }
        return result;
    }

    @Override
    public int getMaxCardDrawsBetweenSpecialCards() {
        int result = 0;
        if(null != panelDeck){
            result = panelDeck.getMaxCardDrawsBetweenSpecialCards();
        }
        return result;
    }

    @Override
    public void setMaxCardDrawsBetweenSpecialCards(int max) throws IllegalArgumentException {
        if(max >= 0){
            panelDeck.setMaxCardDrawsBetweenSpecialCards(max);
        } else {
            throw new IllegalArgumentException("Draws between special face cards can't be negative");
        }
    }

    @Override
    public ICard drawCard() {
        ICard result = null;
        if(null != panelDeck){
            result = panelDeck.drawCard();
        }
        return result;
    }

    @Override
    public boolean hasCardsRemaining() {
        boolean result = false;
        if(null != panelDeck){
            result = panelDeck.hasCardsRemaining();
        }
        return result;
    }

    @Override
    public int getNoOfRemainingCards() {
        int result = 0;
        if(null != panelDeck){
            result= panelDeck.getNoOfRemainingCards();
        }
        return result;
    }

    @Override
    public DeckType getDeckType() {
        DeckType result = null;
        if(null != panelDeck){
            result = panelDeck.getDeckType();
        }
        return result;
    }

    @Override
    public CardAlgorithmCategory getAlgorithmCategory() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public double getProbabilityOfSpecialCard() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setProbabilityOfSpecialCard(double probability) throws IllegalArgumentException {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
