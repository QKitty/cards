/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import datamodel.exceptions.IncompleteExperimentDefinitionException;
import datamodel.interfaces.IExperimentGenerator;
import datamodel.interfaces.IExperimentModel;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Using this JPanel the user can read in an experiments configuration from an 
 * XML file.
 * @author rtucker
 */
public class LoadExperimentFromXML extends javax.swing.JPanel implements IExperimentGenerator {

    private File xmlFile;
    private JFileChooser browseWin;

    /**
     * Creates new form LoadExperimentFromXML
     */
    public LoadExperimentFromXML() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtPath = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();

        txtPath.setForeground(new java.awt.Color(255, 0, 0));
        txtPath.setText("Enter path to experiment setup file");
        txtPath.setToolTipText("Enter path to experiment setup file");
        txtPath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPathKeyPressed(evt);
            }
        });

        btnBrowse.setText("...");
        btnBrowse.setToolTipText("Browse for file");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtPath, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBrowse)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowse))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        processFileBrowse();
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void txtPathKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPathKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            testFilePath();
        }
    }//GEN-LAST:event_txtPathKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables

    public void reset() {
        this.txtPath.setText("Enter path to experiment setup file");
        this.txtPath.setForeground(Color.RED);
        this.xmlFile = null;
    }

    public boolean validateFile(File aFile) {
        boolean result = false;
        if (null != aFile) {
            if (aFile.exists() && aFile.canRead()) {
                result = true;
            }
        }
        return result;
    }

    private void processFileBrowse() {
        //Create file chooser if it does not exist
        if (null == this.browseWin) {
            this.browseWin = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("XML Files", "xml");
            this.browseWin.setFileFilter(filter);
        }
        //Show the file chooser
        int intOpenResult = this.browseWin.showOpenDialog(this);
        //If a file was picked set its absolute path into path textbox
        if (intOpenResult == JFileChooser.APPROVE_OPTION) {
            File theFile = this.browseWin.getSelectedFile();
            if (null != theFile) {
                this.txtPath.setText(theFile.getAbsolutePath());
            }
            this.testFilePath();
        }
    }

    private void testFilePath() {
        File theFile = new File(this.txtPath.getText());
        if (this.validateFile(theFile)) {
            this.txtPath.setForeground(Color.GREEN);
            this.xmlFile = theFile;
        } else {
            JOptionPane.showMessageDialog(this, "Selected file is invalid!", "File does not exist or cannot be read.", JOptionPane.ERROR_MESSAGE);
            this.reset();
        }
    }

    @Override
    public IExperimentModel createExperimentModel() throws IncompleteExperimentDefinitionException {
        IExperimentModel result = null;
        //TO DO code creation of experiment here
        if(null == result){
            throw new IncompleteExperimentDefinitionException("A NULL experiment model was creted by the call to createExperimentModel().");
        }
        return result;
    }
}
