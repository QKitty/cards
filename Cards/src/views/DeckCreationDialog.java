/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import com.gmail.qkitty6.patterns.observer.IObserver;
import datamodel.interfaces.IController;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * A dialog to construct a set of fixed finite decks that have been randomly
 * generated using the FiniteRandomlyGeneratedDeckAlgorithm
 *
 * @author qkitt
 */
public class DeckCreationDialog extends BaseCardsDialog implements IObserver<Void> {

    private final String DEFAULTPATH = "Path to file save directory";

    /**
     * Creates new form NewJDialog
     *
     * @param parent
     * @param modal
     */
    public DeckCreationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                if (null != conn) {
                    conn.getDeckCreationDialogModel().removeAllObservers();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrpRatioSelection = new javax.swing.ButtonGroup();
        radUseRatio = new javax.swing.JRadioButton();
        radEnterProbability = new javax.swing.JRadioButton();
        btnGenerateDecks = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        btnClose = new javax.swing.JButton();
        pnlProbDisplay = new javax.swing.JPanel();
        lblPValue = new javax.swing.JLabel();
        lblRValue = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblRatio = new javax.swing.JLabel();
        spnHighProb = new javax.swing.JSpinner();
        spnLowProb = new javax.swing.JSpinner();
        spnRatio = new javax.swing.JSpinner();
        lblNoOfCards = new javax.swing.JLabel();
        spnNoOfCards = new javax.swing.JSpinner();
        lblFolderPath = new javax.swing.JLabel();
        txtPath = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        bgrpRatioSelection.add(radUseRatio);
        radUseRatio.setSelected(true);
        radUseRatio.setText("Specify King / Queen ratio.");
        radUseRatio.setToolTipText("Specify the ratio between the high king / queen deck and the low king / queen deck");
        radUseRatio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radUseRatioStateChanged(evt);
            }
        });

        bgrpRatioSelection.add(radEnterProbability);
        radEnterProbability.setText("Specify all probabilities.");
        radEnterProbability.setToolTipText("Manually enter probabilities for all decks.");

        btnGenerateDecks.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus-circle.png"))); // NOI18N
        btnGenerateDecks.setText("Generate Card Decks");
        btnGenerateDecks.setToolTipText("Creates four (4) card decks for use in the experiment");
        btnGenerateDecks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateDecksActionPerformed(evt);
            }
        });

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cross-octagon-frame.png"))); // NOI18N
        btnClose.setText("Close Dialog");
        btnClose.setToolTipText("Close this dialog. All created card decks will remain available");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        pnlProbDisplay.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblPValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPValue.setText("High probability value:");
        lblPValue.setToolTipText("Sets the highest probability to use");

        lblRValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRValue.setText("Low probability value:");
        lblRValue.setToolTipText("Sets the lowest probability to use");
        lblRValue.setEnabled(false);

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Card Deck Definition");
        lblTitle.setToolTipText("Enter the High / Low probabilities & number of cards in a deck");

        lblRatio.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRatio.setText("Ratio between high / low probabilities:");
        lblRatio.setToolTipText("Ratio of high to low probability currently in use");

        spnHighProb.setModel(new javax.swing.SpinnerNumberModel(0.4d, 0.0d, 1.0d, 0.01d));
        spnHighProb.setToolTipText("Sets the highest probability to use for drawing a King");
        spnHighProb.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnHighProbStateChanged(evt);
            }
        });

        spnLowProb.setModel(new javax.swing.SpinnerNumberModel(0.2d, 0.0d, 1.0d, 0.01d));
        spnLowProb.setToolTipText("Sets the lowest probability to use for drawing a King");
        spnLowProb.setEnabled(false);
        spnLowProb.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnLowProbStateChanged(evt);
            }
        });

        spnRatio.setModel(new javax.swing.SpinnerNumberModel(0.5d, 0.0d, 1.0d, 0.01d));
        spnRatio.setToolTipText("Sets the lowest probability to use for drawing a King");
        spnRatio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnRatioStateChanged(evt);
            }
        });

        lblNoOfCards.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNoOfCards.setText("Total number of cards in a card deck:");
        lblNoOfCards.setToolTipText("Enter total number of cards in a card deck");

        spnNoOfCards.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(500), Integer.valueOf(1), null, Integer.valueOf(1)));
        spnNoOfCards.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnNoOfCardsStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlProbDisplayLayout = new javax.swing.GroupLayout(pnlProbDisplay);
        pnlProbDisplay.setLayout(pnlProbDisplayLayout);
        pnlProbDisplayLayout.setHorizontalGroup(
            pnlProbDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProbDisplayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlProbDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlProbDisplayLayout.createSequentialGroup()
                        .addGroup(pnlProbDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblNoOfCards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRatio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlProbDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spnLowProb, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                            .addComponent(spnRatio)
                            .addComponent(spnHighProb)
                            .addComponent(spnNoOfCards))))
                .addContainerGap())
        );
        pnlProbDisplayLayout.setVerticalGroup(
            pnlProbDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProbDisplayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(pnlProbDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPValue)
                    .addComponent(spnHighProb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlProbDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRatio)
                    .addComponent(spnRatio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlProbDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRValue)
                    .addComponent(spnLowProb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlProbDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNoOfCards)
                    .addComponent(spnNoOfCards, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        lblFolderPath.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblFolderPath.setText("Enter directory to save generated decks to:");
        lblFolderPath.setToolTipText("Path to the directory into which generated decks are saved");

        txtPath.setText("Path to file save directory");
        txtPath.setToolTipText("Enter (or browse) to directory into which the four experiment decks will be saved.");
        txtPath.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPathFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPathFocusLost(evt);
            }
        });

        btnBrowse.setText("...");
        btnBrowse.setToolTipText("Browse to directory");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGenerateDecks)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClose))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radUseRatio)
                            .addComponent(radEnterProbability))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBrowse))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFolderPath)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(252, 252, 252)
                .addComponent(pnlProbDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(286, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radUseRatio)
                    .addComponent(lblFolderPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radEnterProbability)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBrowse)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlProbDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGenerateDecks)
                    .addComponent(btnClose))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_btnCloseActionPerformed

    private void radUseRatioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radUseRatioStateChanged
        if (radUseRatio.isSelected()) {
            spnRatio.setEnabled(true);
            lblRatio.setEnabled(true);
            spnLowProb.setEnabled(false);
            lblRValue.setEnabled(false);
        } else {
            spnRatio.setEnabled(false);
            lblRatio.setEnabled(false);
            spnLowProb.setEnabled(true);
            lblRValue.setEnabled(true);
        }
    }//GEN-LAST:event_radUseRatioStateChanged

    private void spnHighProbStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnHighProbStateChanged
        if (null != this.conn) {
            double highProb = (double) spnHighProb.getValue();
            DeckCreationDialogModel model = this.conn.getDeckCreationDialogModel();
            try {
                model.setPValue(highProb);
            } catch (PropertyVetoException ex) {
                spnHighProb.setValue(model.getPValue());
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Could not set high probability to requested value...", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(DeckCreationDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_spnHighProbStateChanged

    private void spnRatioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnRatioStateChanged
        if (null != this.conn) {
            double dblRatio = (double) spnRatio.getValue();
            DeckCreationDialogModel model = this.conn.getDeckCreationDialogModel();
            try {
                model.setRatio(dblRatio);
            } catch (PropertyVetoException ex) {
                spnRatio.setValue(model.getRatio());
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Could not set ratio to requested value...", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(DeckCreationDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_spnRatioStateChanged

    private void spnLowProbStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnLowProbStateChanged
        if (null != this.conn) {
            double lowProb = (double) spnLowProb.getValue();
            DeckCreationDialogModel model = this.conn.getDeckCreationDialogModel();
            try {
                model.setRValue(lowProb);
            } catch (PropertyVetoException ex) {
                spnLowProb.setValue(model.getRValue());
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Could not set low probability to requested value...", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(DeckCreationDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_spnLowProbStateChanged

    private void spnNoOfCardsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnNoOfCardsStateChanged
        if (null != this.conn) {
            int noOfCards = (int) spnNoOfCards.getValue();
            DeckCreationDialogModel model = this.conn.getDeckCreationDialogModel();
            try {
                model.setNumberOfCards(noOfCards);
            } catch (PropertyVetoException ex) {
                spnNoOfCards.setValue(model.getNumberOfCards());
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Could not set number of cards in a deck to requested value...", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(DeckCreationDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_spnNoOfCardsStateChanged

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        if (this.conn != null) {
            DeckCreationDialogModel model = this.conn.getDeckCreationDialogModel();
            File destinationFolder = model.getDestinationFolder();
            if (null == destinationFolder) {
                if (!txtPath.getText().isEmpty()) {
                    destinationFolder = new File(txtPath.getText());
                    if (!destinationFolder.exists()) {
                        destinationFolder = null;
                    }
                }
            }
            if (null == destinationFolder) {
                destinationFolder = new File(System.getProperty("user.home"));
            }
            JFileChooser fc = new JFileChooser(destinationFolder);
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fc.setAcceptAllFileFilterUsed(false);
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                destinationFolder = fc.getSelectedFile();
                try {
                    model.setDestinationFolder(destinationFolder);
                } catch (PropertyVetoException ex) {
                    JOptionPane.showMessageDialog(this, "Invalid folder selected.", "Cannot set save destination for experiment files...", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(DeckCreationDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                this.update();
            }
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void txtPathFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPathFocusLost
        if (!txtPath.getText().isEmpty()) {
            File newDest = new File(txtPath.getText());
            if (!newDest.exists() && !newDest.getAbsolutePath().contains(DEFAULTPATH)) {
                int userChoice = JOptionPane.showConfirmDialog(this, "Create new directory at: " + newDest.getAbsolutePath(), "Create new directory...", JOptionPane.OK_CANCEL_OPTION);
                if (userChoice == JOptionPane.OK_OPTION) {
                    if (newDest.mkdirs()) {
                        JOptionPane.showMessageDialog(this, "Directory created: " + newDest.getAbsolutePath(), "New directory created...", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Could not create directory at: " + newDest.getAbsolutePath(), "Direction creation error...", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } else {
            txtPath.setText(DEFAULTPATH);
        }
        this.update();
    }//GEN-LAST:event_txtPathFocusLost

    private void txtPathFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPathFocusGained
        if (txtPath.getText().equals(DEFAULTPATH)) {
            txtPath.setText("");
        }
    }//GEN-LAST:event_txtPathFocusGained

    private void btnGenerateDecksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateDecksActionPerformed
        if (this.conn != null) {
            DeckCreationDialogModel model = this.conn.getDeckCreationDialogModel();
            try {
                model.createCardDecks(model.getDestinationFolder());
                JOptionPane.showMessageDialog(this, "Card decks created at: " + model.getDestinationFolder().getAbsolutePath(), "Files created...", JOptionPane.INFORMATION_MESSAGE);
                this.btnCloseActionPerformed(null);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error creating experiment files...", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(DeckCreationDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnGenerateDecksActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeckCreationDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            DeckCreationDialog dialog = new DeckCreationDialog(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrpRatioSelection;
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnGenerateDecks;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblFolderPath;
    private javax.swing.JLabel lblNoOfCards;
    private javax.swing.JLabel lblPValue;
    private javax.swing.JLabel lblRValue;
    private javax.swing.JLabel lblRatio;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlProbDisplay;
    private javax.swing.JRadioButton radEnterProbability;
    private javax.swing.JRadioButton radUseRatio;
    private javax.swing.JSpinner spnHighProb;
    private javax.swing.JSpinner spnLowProb;
    private javax.swing.JSpinner spnNoOfCards;
    private javax.swing.JSpinner spnRatio;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean setController(IController aController) {
        boolean result = super.setController(aController);
        if (result) {
            this.conn.getDeckCreationDialogModel().registerObserver(this);
            update();
        }
        return result;
    }

    @Override
    public void update() {
        //Do update to the display here
        if (null != this.conn) {
            DeckCreationDialogModel model = this.conn.getDeckCreationDialogModel();
            if (model.isUsingRatio()) {
                radUseRatio.setSelected(true);
            } else {
                radEnterProbability.setSelected(true);
            }
            spnHighProb.setValue(model.getPValue());
            spnRatio.setValue(model.getRatio());
            spnLowProb.setValue(model.getRValue());
            spnNoOfCards.setValue(model.getNumberOfCards());
            File destinationFolder = model.getDestinationFolder();
            if (null != destinationFolder && destinationFolder.exists()) {
                txtPath.setText(destinationFolder.getAbsolutePath());
            } else {
                txtPath.setText(DEFAULTPATH);
            }
            if (model.isInValidState()) {
                btnGenerateDecks.setEnabled(true);
            } else {
                btnGenerateDecks.setEnabled(false);
            }
        }
    }

}
